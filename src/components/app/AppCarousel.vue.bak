<script setup lang="ts">

const props = withDefaults(defineProps<{
  totalSize?: number
  gap?: number
  minCardWidth?: number
}>(), {
  totalSize: 0,
  gap: 8,
  minCardWidth: 300
})

const carouselRef = ref()
const columnCount = ref(1)
let observer: ResizeObserver | null = null

const calculateColumns = (entry: ResizeObserverEntry) => {
  const count = Math.trunc(entry.contentRect.width / props.minCardWidth)
  if (((count - 1) * props.gap) + count * props.minCardWidth > entry.contentRect.width) {
    columnCount.value = count - 1
  } else {
    columnCount.value = count
  }
}

onMounted(() => {
  if (carouselRef.value) {
    observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {
      requestAnimationFrame(() => calculateColumns(entries[0]))
    })
    observer.observe(carouselRef.value?.$el)
  }
})

onUnmounted(() => {
  observer?.disconnect()
})

const maxPage = computed(() => Math.ceil(props.totalSize / columnCount.value))

const offsets = computed(() =>{
  const arr = new Array(maxPage.value)
      .fill(null)
      .map((_, i) => i * columnCount.value)
  arr[arr.length - 1] = props.totalSize - columnCount.value - 1
  return arr
})

const current = ref<number>(0);

const prev = () => {
  current.value = Math.max(current.value - 1, 0)
}

const next = () => {
  current.value = Math.min(current.value + 1, maxPage.value - 1)
}

</script>

<template>
  <div class="h-fit w-100% flex">
    <div class="w-42px flex justify-center items-center">
      <v-btn
        v-if="current !== 0"
        variant="flat"
        class="min-w-unset! p-0! h-48px! bg-transparent"
        @click="prev"
      >
        <v-icon icon="mdi-chevron-left" size="42" color="#333333" class="w-24px! min-w-unset!" />
      </v-btn>
    </div>

    <v-carousel
      v-model="current"
      ref="carouselRef"
      height="fit-content"
      hide-delimiters
      :show-arrows="false"
    >
      <v-carousel-item
        v-for="offset in offsets"
      >
        <div class="flex items-center" :class="[ `gap-${gap}px` ]">
          <template
            v-for="i in Math.min(columnCount, props.totalSize - offset)"
            :key="i"
          >
            <slot :index="offset + i" />
          </template>
        </div>
      </v-carousel-item>
    </v-carousel>

    <div class="w-42px flex justify-center items-center">
      <v-btn
        v-if="current !== maxPage - 1"
        variant="flat"
        class="min-w-unset! p-0! h-48px! bg-transparent"
        @click="next"
      >
        <v-icon icon="mdi-chevron-right" size="42" color="#333333" class="w-24px! min-w-unset!" />
      </v-btn>
    </div>
  </div>
</template>

<style scoped lang="sass">

</style>
